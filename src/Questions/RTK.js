export const dummyQuestionsRTK = [
    {
      id: 7000,
      question: "What is Redux Toolkit, and why is it used?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p>Redux Toolkit is a library that provides a set of tools to simplify the process of writing Redux logic. It helps in reducing the boilerplate code required to set up Redux, including creating actions, reducers, and store. It provides utility functions like <code>configureStore</code>, <code>createSlice</code>, and <code>createAsyncThunk</code> that simplify Redux management.</p>
      `,
      example: false,
      codeSnippet: ""
    },
    {
      id: 7001,
      question: "What is createSlice in Redux Toolkit, and how does it work?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p><code>createSlice</code> is a function in Redux Toolkit that helps you write Redux reducers and actions in a simpler, more concise way. It automatically generates action creators and action types based on the slice name and its reducers. This reduces the need for manually defining actions and action types.</p>
      `,
      example: false,
      codeSnippet: ""
    },
    {
      id: 7002,
      question: "How does createAsyncThunk help with async logic in Redux Toolkit?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p><code>createAsyncThunk</code> simplifies handling asynchronous operations like fetching data from APIs. It generates lifecycle actions (pending, fulfilled, and rejected) for you, helping manage loading, success, and error states automatically.</p>
      `,
      example: false,
      codeSnippet: ""
    },
    {
      id: 7003,
      question: "What is the difference between createSlice and reducer in Redux Toolkit?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p><code>createSlice</code> is a higher-level abstraction provided by Redux Toolkit to combine action creators and reducers. It allows you to define your state slice along with the reducers in one place. A <code>reducer</code>, on the other hand, is a pure function used to handle state updates in a more traditional Redux setup, where action creators and reducers are defined separately.</p>
      `,
      example: false,
      codeSnippet: ""
    },
    {
      id: 7004,
      question: "What is configureStore in Redux Toolkit, and why should you use it?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p><code>configureStore</code> is a utility function in Redux Toolkit that simplifies the store setup. It automatically sets up the Redux DevTools extension, handles redux-thunk middleware, and allows you to easily add custom middleware. It is recommended over the traditional <code>createStore</code> method as it comes with sensible defaults.</p>
      `,
      example: false,
      codeSnippet: ""
    },
    {
      id: 7005,
      question: "How do you handle side effects in Redux Toolkit?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p>In Redux Toolkit, side effects like API calls can be handled using <code>createAsyncThunk</code>. This allows you to dispatch lifecycle actions (pending, fulfilled, rejected) based on the result of the async operation, ensuring better state management for async actions.</p>
      `,
      example: false,
      codeSnippet: ""
    },
    {
      id: 7006,
      question: "What is the difference between dispatch and dispatching a thunk in Redux Toolkit?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p>In Redux Toolkit, you can dispatch actions created with <code>createSlice</code> as usual, which will directly update the state. However, when you dispatch a thunk (created with <code>createAsyncThunk</code>), the action can trigger an async operation, such as fetching data from an API, and then dispatch additional actions based on the result of that async operation.</p>
      `,
      example: false,
      codeSnippet: ""
    },
    {
      id: 7007,
      question: "What is the extraReducers field in a slice?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p>The <code>extraReducers</code> field in a slice allows you to handle actions that are not defined within the slice itself. This is commonly used to handle actions generated by <code>createAsyncThunk</code> or other slices. It enables you to react to external actions and modify the slice's state accordingly.</p>
      `,
      example: false,
      codeSnippet: ""
    },
    {
      id: 7008,
      question: "What are the benefits of using Redux Toolkit over traditional Redux?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p>The primary benefits of Redux Toolkit are:</p>
        <ul>
          <li><strong>Less boilerplate:</strong> Simplifies action and reducer creation with <code>createSlice</code>.</li>
          <li><strong>Built-in middleware:</strong> Includes useful middleware like redux-thunk by default.</li>
          <li><strong>Improved performance:</strong> Offers optimizations like automatic memoization of selectors.</li>
          <li><strong>Simpler store configuration:</strong> <code>configureStore</code> simplifies store setup.</li>
        </ul>
      `,
      example: false,
      codeSnippet: ""
    },
    {
      id: 7009,
      question: "How do you handle nested states with Redux Toolkit?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p>You can manage nested states in Redux Toolkit by directly accessing nested fields within the reducer functions defined in <code>createSlice</code>. Redux Toolkit uses the Immer library internally, which allows you to mutate the state directly in the reducer without violating Redux's immutability principle.</p>
      `,
      example: false,
      codeSnippet: ""
    },
    {
      id: 7010,
      question: "How do you access and modify state in Redux Toolkit using createSlice?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p>In <code>createSlice</code>, you can access and modify the state directly within the reducer functions. Redux Toolkit uses Immer under the hood, which allows you to write "mutating" code while maintaining the immutability of the state. The actual state is never mutated directly; Immer handles it for you.</p>
      `,
      example: true,
      codeSnippet: `
        const counterSlice = createSlice({
          name: 'counter',
          initialState: { value: 0 },
          reducers: {
            increment(state) {
              state.value += 1; // Immer allows direct mutation of the state
            },
            decrement(state) {
              state.value -= 1;
            }
          }
        });
      `
    },
    {
      id: 7011,
      question: "What is the purpose of createEntityAdapter in Redux Toolkit?",
      technology: "RTK",
      difficulty: "Medium",
      answer: `
        <p><code>createEntityAdapter</code> is a utility function provided by Redux Toolkit to simplify managing normalized data in the Redux state. It creates reducers and selectors that help manage collections of data (like an array of items) in a way that makes it easier to access, update, and remove individual items based on their unique identifiers.</p>
      `,
      example: true,
      codeSnippet: `
        const usersAdapter = createEntityAdapter();
  
        const initialState = usersAdapter.getInitialState();
  
        const usersSlice = createSlice({
          name: 'users',
          initialState,
          reducers: {},
          extraReducers: (builder) => {
            builder.addCase(fetchUsers.fulfilled, (state, action) => {
              usersAdapter.setAll(state, action.payload);
            });
          }
        });
      `
    }
  ];
  